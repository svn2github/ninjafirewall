<?php
/*
 +---------------------------------------------------------------------+
 | NinjaFirewall (WP Edition)                                          |
 |                                                                     |
 | (c) NinTechNet - http://nintechnet.com/                             |
 +---------------------------------------------------------------------+
 | REVISION: 2016-09-02 18:50:16                                       |
 +---------------------------------------------------------------------+
 | This program is free software: you can redistribute it and/or       |
 | modify it under the terms of the GNU General Public License as      |
 | published by the Free Software Foundation, either version 3 of      |
 | the License, or (at your option) any later version.                 |
 |                                                                     |
 | This program is distributed in the hope that it will be useful,     |
 | but WITHOUT ANY WARRANTY; without even the implied warranty of      |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       |
 | GNU General Public License for more details.                        |
 +---------------------------------------------------------------------+ i18n+ / sa
*/

if (! isset( $nfw_['nfw_options']['enabled']) ) {
	header('HTTP/1.1 404 Not Found');
	header('Status: 404 Not Found');
}

/* ------------------------------------------------------------------ */ // i18n+
function fw_malwarescan() {

	global $nfw_;

	$msc_tot_sigs = $nfw_['log_dir'] . '/cache/malscan_tot.sigs';
	$msc_end = $nfw_['log_dir'] . '/cache/malscan.end';
	$msc_count = $nfw_['log_dir'] . '/cache/malscan.count';
	$msc_lock = $nfw_['log_dir'] . '/cache/malscan.lock';
	$msc_res = $nfw_['log_dir'] . '/cache/malscan.res';
	$msc_mem = $nfw_['log_dir'] . '/cache/malscan.mem';
	$msc_log = $nfw_['log_dir'] . '/cache/malscan.log';

	if ( $_POST['malscan'] == 1 ) {
		@file_put_contents( $msc_log, time() . ": [FW] Fetching signatures from $msc_tot_sigs\n", FILE_APPEND );
		if ( file_exists( $msc_tot_sigs ) ) {
			$res = file_get_contents( $msc_tot_sigs );
			echo $res;
			@unlink( $msc_tot_sigs );
			@file_put_contents( $msc_log, time() . ": [FW] $res signatures found\n", FILE_APPEND );
		} else {
			@file_put_contents( $msc_log, time() . ": [FW] ERROR: file not found\n", FILE_APPEND );
			header('HTTP/1.0 404 Not Found');
		}

	} elseif ( $_POST['malscan'] == 2 ) {
		if ( file_exists( $msc_end ) ) {
			$stat = @stat( $msc_count );
			echo 'end:' . $stat['size'];
			@unlink( $msc_end );
			@file_put_contents( $msc_log, time() . ": [FW] Scanning process has ended\n", FILE_APPEND );
		} elseif ( file_exists( $msc_lock ) ) {
			if ( file_exists( $msc_count ) ) {
				$stat = stat( $msc_count );
				echo 'ok:' . $stat['size'];
				@file_put_contents( $msc_log, time() . ": [FW] Fetching result\n", FILE_APPEND );
			} else {
				@file_put_contents( $msc_log, time() . ": [FW] ERROR: $msc_count not found\n", FILE_APPEND );
				echo 'err:21';
				if ( file_exists( $msc_lock ) ) {
					unlink( $msc_lock );
				}
			}

		} else {
			echo 'err:22';
		}

	} elseif ( $_POST['malscan'] == 3 ) {
		if ( file_exists( $msc_lock ) ) {
			unlink( $msc_lock );
		}
		header('HTTP/1.0 200 OK');
		@file_put_contents( $msc_log, time() . ": [FW] Cancelling scanning process and removing lock file\n", FILE_APPEND );

	} elseif ( $_POST['malscan'] == 4 ) {

		if ( file_exists( $msc_mem ) ) {
			$mem = file_get_contents( $msc_mem );
			$mem = round ( $mem / 1048576 );
			unlink( $msc_mem );
		} else {
			$mem = 0;
		}

		if ( file_exists( $msc_res ) ) {
			$res = @unserialize( file_get_contents( $msc_res ) );
			if (! is_array( $res ) ) {
				echo 'err~~40';
			} else {
				echo 'ok~~'. $mem . '~~' . count( $res ) . '~~';
				$count = 1;
				foreach ( $res as $file => $reason ) {
					echo "{$count}-" . htmlspecialchars( "$reason: " . base64_decode( $file ) ) . "\n";
					$count++;
				}
			}
		} else {
			echo 'ok~~'. $mem . '~~0';
		}
	}

	exit;

}
/* ------------------------------------------------------------------ */ // i18n+
// EOF
