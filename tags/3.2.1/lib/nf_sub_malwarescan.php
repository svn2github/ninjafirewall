<?php
/*
 +---------------------------------------------------------------------+
 | NinjaFirewall (WP Edition)                                          |
 |                                                                     |
 | (c) NinTechNet - http://nintechnet.com/                             |
 +---------------------------------------------------------------------+
 | REVISION: 2016-05-12 18:50:16                                       |
 +---------------------------------------------------------------------+
 | This program is free software: you can redistribute it and/or       |
 | modify it under the terms of the GNU General Public License as      |
 | published by the Free Software Foundation, either version 3 of      |
 | the License, or (at your option) any later version.                 |
 |                                                                     |
 | This program is distributed in the hope that it will be useful,     |
 | but WITHOUT ANY WARRANTY; without even the implied warranty of      |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       |
 | GNU General Public License for more details.                        |
 +---------------------------------------------------------------------+ i18n+ / sa
*/

if (! defined( 'NFW_ENGINE_VERSION' ) ) { die( 'Forbidden' ); }

define('NFW_SIG_DIR', NFW_LOG_DIR . '/nfwlog/sigs');
if (! is_dir( NFW_SIG_DIR ) ) {
	mkdir( NFW_SIG_DIR, 0755);
	touch( NFW_SIG_DIR . '/index.html' );
}

define('MSC_TOT_SIGS', NFW_LOG_DIR . '/nfwlog/cache/malscan_tot.sigs' );
define('MSC_END', NFW_LOG_DIR . '/nfwlog/cache/malscan.end' );
define('MSC_COUNT', NFW_LOG_DIR . '/nfwlog/cache/malscan.count' );
define('MSC_LOCK', NFW_LOG_DIR . '/nfwlog/cache/malscan.lock' );
define('MSC_RES', NFW_LOG_DIR . '/nfwlog/cache/malscan.res' );

if ( defined('NFMALWARESCANDO') ) {
	nfw_malware_start();
	return;
}

if ( empty($_SESSION['nfw_goodguy']) ) {
	echo '<div class="wrap">
	<div style="width:33px;height:33px;background-image:url( ' . plugins_url() . '/ninjafirewall/images/ninjafirewall_32.png);background-repeat:no-repeat;background-position:0 0;margin:7px 5px 0 0;float:left;"></div>
	<h1>' . __('Anti-Malware', 'ninjafirewall') . '</h1>
	<div class="error notice"><p>' . sprintf( __('Error: You must be whitelisted in order to use that feature: click on the <a href="%s">Firewall Policies</a> menu and ensure that the "Add the Administrator to the whitelist" option is enabled.', 'ninjafirewall'), '?page=nfsubpolicies' ) . '</p></div></div>';
	return;
}

add_action( 'admin_footer', 'nfw_msajax_javascript' );

nf_not_allowed( 'block', __LINE__ );

$err = $success = '';

nfw_clean_cache();

$nfw_options = nfw_get_option('nfw_options');

if (! empty( $_POST['nfw_act']) ) {
	if ( empty($_POST['nfwnonce']) || ! wp_verify_nonce($_POST['nfwnonce'], 'malware_scan') ) {
		wp_nonce_ays('malware_scan');
	}
	if ( $_REQUEST['nfw_act'] == 'save_options') {
		nfw_malware_options( $nfw_options );
		$success = __('Your changes have been saved.', 'ninjafirewall');
	}
	$nfw_options = nfw_get_option( 'nfw_options' );
}

$user_sigs = array();
$user_sigs = nfw_fetch_user_sigs();
if (! file_exists( __DIR__ . '/share/sigs.php') ) {
	$nfw_sigs = 0;
} else {
	$nfw_sigs = 1;
}
?>
<script>
<?php
	echo 'var tot_sigs = '. (count($user_sigs) + $nfw_sigs) .';'
?>
function select_sigs(sigs) {
	if (sigs.checked == false) {
		if (tot_sigs < 2) {
			alert( '<?php _e('You must select at least one signatures file.', 'ninjafirewall') ?>');
			return false;
		} else {
			tot_sigs--;
		}
	} else {
		tot_sigs++;
	}
}
function toogle_sigs() {
	if (document.getElementById('sigs-list').style.display == 'none') {
		document.getElementById('sigs-list').style.display = '';
		document.getElementById('minplus').innerHTML = '-';
	} else {
		document.getElementById('sigs-list').style.display = 'none';
		document.getElementById('minplus').innerHTML = '+';
	}
}
</script>
<?php

echo '<div class="wrap">
	<div style="width:33px;height:33px;background-image:url( ' . plugins_url() . '/ninjafirewall/images/ninjafirewall_32.png);background-repeat:no-repeat;background-position:0 0;margin:7px 5px 0 0;float:left;"></div>
	<h1>' . __('Anti-Malware', 'ninjafirewall') . '</h1>';

if ( $err ) {
	echo '<div class="error notice is-dismissible"><p>' . $err . '</p></div>';
} elseif ( $success ) {
	echo '<div class="updated notice is-dismissible"><p>' . $success . '</p></div>';
}

if (! $nfw_sigs && ! $user_sigs ) {
	echo '<div class="error notice"><p>' . __("Error: NinjaFirewall's built-in signatures cannot be found. You do not appear to have any user-defined signatures either. The scanning process cannot be started.", 'ninjafirewall') . '</p></div></div>';
	return;
}
?>
	<br />
	<p><input class="button-primary" value="<?php _e('Scan System For Malware', 'ninjafirewall') ?> Â»" type="button" id="button_start" />
	&nbsp;&nbsp;<input class="button-secondary" value="<?php _e('Cancel Scan', 'ninjafirewall') ?>" type="button" id="button_cancel" disabled="disabled" />

	<?php
	$previous_scan = 0;
	if ( file_exists( MSC_RES ) ) {
		$res = @unserialize( file_get_contents( MSC_RES ) );
		if ( is_array( $res ) ) {
			$previous_scan = 1;
			?>&nbsp;&nbsp;<input class="button-secondary" value="<?php _e('Show previous scan results', 'ninjafirewall') ?>" type="button" id="button_previous" />
			<?php
		}
	}
	echo '</p>';

	if ( $nfw_sigs ) {
		$tmp = '+';
	} else {
		$tmp = '-';
	}
	?>
	<p><a href="javascript:toogle_sigs();" style="text-decoration:none;" title="<?php _e('Click to select the signatures to (un)load.', 'ninjafirewall') ?>">[ <font id="minplus"><?php echo $tmp; ?></font> ] <?php _e('Signatures', 'ninjafirewall') ?></a></p>
	<?php

	if (! $nfw_sigs ) {
	?>
		<table class="form-table" id="sigs-list">
	<?php
		$sigs_msg = "<p><label><input type=\"checkbox\" disabled=\"disabled\" /><font color=\"red\">NinjaFirewall's built-in signatures cannot be found.</font></label></p>";
	} else {
	?>
		<table class="form-table" style="display:none;" id="sigs-list">
	<?php
		$sigs_msg = '<p><label><input type="checkbox" name="sigs[]" value="lmd" onClick="return select_sigs(this);" checked="checked" />Linux Malware Detect + NinjaFirewall</label></p>';
	}
	?>
		<tr>
			<th scope="row"><?php _e('Load/Unload signatures', 'ninjafirewall') ?></th>
			<td align="left">
			<?php
			echo $sigs_msg;
			if ( $user_sigs ) {
				foreach ( $user_sigs as $sig ) {
					echo '<p><label><input type="checkbox" name="sigs[]" value="'. md5( $sig ) .'" onClick="return select_sigs(this);" checked="checked" />'. htmlspecialchars( basename( $sig ) ) .'</label></p>';
				}
			} else {
				echo '<p><span class="description">' . sprintf( __('See <a href="%s">our blog article</a> if you want to add your own signatures.', 'ninjafirewall'), 'http://blog.nintechnet.com/adding-your-own-signatures-to-ninjafirewall-anti-malware/' ) .'</span></p>';
			}
			?>
			</td>
		</tr>
	</table>

	<?php
	if ( $previous_scan ) {
	?>
	<table class="form-table" style="display:none;background-color:#F9F9F9;" id="previous_list">
		<tr>
			<th scope="row">&nbsp;<?php _e('Previous scan results', 'ninjafirewall') ?></th>
			<td align="left">
			<?php
				$rows = 10;
				if ( count( $res ) < 11 ) {
					$rows = count( $res ) + 1;
				} else if ( count( $res ) > 10 && count( $res ) < 21 ) {
					$rows = 20;
				}
				$count = 1;
			?><textarea class="large-text code" rows="<?php echo $rows ?>" wrap="off"><?php
				foreach ( $res as $file => $reason ) {
					echo "{$count}-" . htmlspecialchars( "$reason: " . base64_decode( $file ) ) . "\n";
					$count++;
				}
			?></textarea>
			</td>
		</tr>
	</table>
	<?php
	}
	?>

	<table class="form-table" style="display:none;background-color:#F9F9F9;" id="table_processing">
		<tr>
			<th scope="row">&nbsp;<?php _e('Status', 'ninjafirewall') ?></th>
			<td align="left">
				<?php $anim_gif = '<img style="vertical-align:middle" src="' . plugins_url() . '/ninjafirewall/images/scan_progress.gif">'; ?>
				<p id="loading-sigs"><?php _e('Loading signatures:', 'ninjafirewall') ?> <font id="loading-sig-gif"><?php echo $anim_gif ?></font><font id="loading-sigs-found" style="display:none"></font></p>
				<p id="scanning" style="display:none"><font id="scanned"></font> <font id="scanning-num-files"></font> <?php _e('files', 'ninjafirewall') ?> <font id="scanning-gif"><?php echo $anim_gif ?></font></p>
				<p id="total-time" style="display:none"></p>
				<p id="malware-hits" style="display:none"><?php _e('Malware hits:', 'ninjafirewall') ?> <font id="malware_hits_count">0</font></p>
				<p id="suspicious"><textarea id="suspicious_list" class="large-text code" rows="10" wrap="off"></textarea></p>
			</td>
		</tr>
	</table>

	<br />

	<div id="table_options">
	<h3><?php _e('Options', 'ninjafirewall') ?></h3>
	<form method="post" name="malware_option_form">
		<?php wp_nonce_field('malware_scan', 'nfwnonce', 0);

		if (! empty($nfw_options['malware_dir']) && is_dir($nfw_options['malware_dir']) ) {
			$malware_dir = htmlspecialchars($nfw_options['malware_dir']);
		} else {
			$malware_dir = htmlspecialchars(ABSPATH);
		}

		if (! isset($nfw_options['malware_symlink']) || ! preg_match( '/^[01]$/', $nfw_options['malware_symlink'] ) ) {
			$nfw_options['malware_symlink'] = 1;
		}

		if (! isset($nfw_options['malware_timestamp']) || ! ctype_digit($nfw_options['malware_timestamp']) ) {
			$malware_timestamp = 7;
		} else {
			$malware_timestamp = $nfw_options['malware_timestamp'];
		}

		if (! isset($nfw_options['malware_size']) || ! ctype_digit($nfw_options['malware_size']) ) {
			$malware_size = 2048;
		} else {
			$malware_size = $nfw_options['malware_size'];
		}

		$malware_extensions = '';
		if (! empty( $nfw_options['malware_extensions'] ) ) {
			$tmp = unserialize( $nfw_options['malware_extensions'] );
			if ( $tmp ) {
				foreach ($tmp as $value) {
					$malware_extensions .= htmlspecialchars( $value ) . "\n";
				}
			}
		}

		$malware_folders = '';
		if (! empty( $nfw_options['malware_folders'] ) ) {
			$tmp = unserialize( $nfw_options['malware_folders'] );
			if ( $tmp ) {
				foreach ($tmp as $value) {
					$malware_folders .= htmlspecialchars( $value ) . "\n";
				}
			}
		}

		?>

		<table class="form-table">
			<tr>
				<th scope="row"><?php _e('Scan all files in that directory', 'ninjafirewall') ?></th>
				<td align="left"><input class="large-text" type="text" name="nfw_options[malware_dir]" value="<?php echo $malware_dir ?>" maxlength="255"><br /><span class="description"><?php printf( __('Default: %s', 'ninjafirewall'), htmlentities( ABSPATH ) ) ?></span></td>
			</tr>

			<tr>
				<th scope="row"><?php _e('Symlinks', 'ninjafirewall') ?></th>
				<td align="left"><label><input type="checkbox" name="nfw_options[malware_symlink]" value="1"<?php checked($nfw_options['malware_symlink'], 1) ?> /><?php _e('Do not follow symbolic links (default)', 'ninjafirewall') ?></label></td>
			</tr>

			<tr>
				<th scope="row"><?php _e('Timestamp', 'ninjafirewall') ?></th>
				<td align="left"><?php printf( __('Scan files created/modified in the last %s days', 'ninjafirewall'), '<input name="nfw_options[malware_timestamp]" step="1" min="0" value="'. $malware_timestamp .'" class="small-text" type="number">'); ?>
				<br /><span class="description"><?php _e('Set this option to 0 to disable it (default: 7 days).', 'ninjafirewall') ?></span></td>
			</tr>

			<tr>
				<th scope="row"><?php _e('Size', 'ninjafirewall') ?></th>
				<td align="left"><?php printf( __('Scan files smaller than %s KB', 'ninjafirewall'), '<input name="nfw_options[malware_size]" step="1" min="0" value="'. $malware_size .'" class="small-text" type="number">'); ?>
				<br /><span class="description"><?php _e('Set this option to 0 to disable it (default: 2048 KB).', 'ninjafirewall') ?></span></td>
			</tr>

			<tr>
				<th scope="row"><?php _e('Ignore file extensions', 'ninjafirewall') ?></th>
				<td align="left">
				<textarea name="nfw_options[malware_extensions]" cols="30" rows="5"><?php echo $malware_extensions ?></textarea>
				<br /><span class="description"><?php _e('Case insensitive, one extension per line.', 'ninjafirewall') ?></span></td>
			</tr>

			<tr>
				<th scope="row"><?php _e('Ignore files/folders', 'ninjafirewall') ?></th>
				<td align="left">
				<textarea name="nfw_options[malware_folders]" cols="30" rows="5"><?php echo $malware_folders ?></textarea>
				<br /><span class="description"><?php _e('Case sensitive string/substring, one per line.', 'ninjafirewall') ?></span></td>
			</tr>

		</table>
		<input type="hidden" name="nfw_act" value="save_options" />
		<p><input type="submit" class="button-primary" value="<?php _e('Save Options', 'ninjafirewall') ?>" /></p>
	</form>
	</div>
</div>
	<?php

/* ------------------------------------------------------------------ */ // i18n+

function nfw_malware_options( $nfw_options ) {


	if (! empty( $_POST['nfw_options']['malware_dir'] ) ) {
		$nfw_options['malware_dir'] = $_POST['nfw_options']['malware_dir'];
		if ( strlen( $nfw_options['malware_dir'] ) > 1 ) {
			$nfw_options['malware_dir'] = rtrim( $nfw_options['malware_dir'], '/\\ ' );
		}
		if (! is_dir( $nfw_options['malware_dir'] ) ) {
			$nfw_options['malware_dir'] = ABSPATH;
		}
	} else {
		$nfw_options['malware_dir'] = ABSPATH;
	}

	if (! empty( $_POST['nfw_options']['malware_symlink'] ) ) {
		$nfw_options['malware_symlink'] = 1;
	} else {
		$nfw_options['malware_symlink'] = 0;
	}

	if (! isset( $_POST['nfw_options']['malware_timestamp'] ) || ! ctype_digit( $_POST['nfw_options']['malware_timestamp'] ) ) {
		$nfw_options['malware_timestamp'] = 7;
	} else {
		$nfw_options['malware_timestamp'] = $_POST['nfw_options']['malware_timestamp'];
	}

	if (! isset( $_POST['nfw_options']['malware_size'] ) || ! ctype_digit( $_POST['nfw_options']['malware_size'] ) ) {
		$nfw_options['malware_size'] = 2048;
	} else {
		$nfw_options['malware_size'] = $_POST['nfw_options']['malware_size'];
	}

	$nfw_options['malware_extensions'] = '';
	if (! empty( $_POST['nfw_options']['malware_extensions'] ) ) {
		$res = explode( "\n", $_POST['nfw_options']['malware_extensions'] );
		$extensions = array_values( array_filter( array_map( 'trim', $res ) ) );
		$res = array();
		foreach ( $extensions as $extension ) {
			$extension = preg_replace( '/[^\w-\.\s]|^\./', '', $extension );
			if ( $extension ) {
				$res[] = strtolower( $extension );
			}
		}
		if ( $res ) {
			$nfw_options['malware_extensions'] = serialize( $res );
		}
	}

	$nfw_options['malware_folders'] = '';
	if (! empty( $_POST['nfw_options']['malware_folders'] ) ) {
		$res = explode( "\n", $_POST['nfw_options']['malware_folders'] );
		$folders = array_values( array_filter( array_map( 'trim', $res ) ) );
		$res = array();
		foreach ( $folders as $folder ) {
			$folder = preg_replace( '`[^-./\s\w]`', '', $folder );
			if ( $folder ) {
				$res[] = $folder;
			}
		}
		if ( $res ) {
			$nfw_options['malware_folders'] = serialize( $res );
		}
	}
	nfw_update_option( 'nfw_options', $nfw_options);
}

/* ------------------------------------------------------------------ */ // i18n+

function nfw_fetch_user_sigs() {

	if (! is_dir( NFW_SIG_DIR ) ) { return; }

	$glob = glob( NFW_SIG_DIR . "/*.sig");
	if ( is_array($glob)) {
		return $glob;
	}

}

/* ------------------------------------------------------------------ */ // i18n+

function nfw_clean_cache() {

	$_SESSION['nfw_malscan'] = 1;

	if (file_exists( MSC_LOCK ) ) {
		unlink( MSC_LOCK );
	}
	if (file_exists( MSC_COUNT ) ) {
		unlink( MSC_COUNT );
	}
	if (file_exists( NFW_SIG_DIR . '/sigs-error.txt') ) {
		unlink( NFW_SIG_DIR . '/sigs-error.txt' );
	}
	if (file_exists( MSC_TOT_SIGS ) ) {
		unlink( MSC_TOT_SIGS );
	}
	if (file_exists( MSC_END ) ) {
		unlink( MSC_END );
	}

}

/* ------------------------------------------------------------------ */ // i18n+

$scan_res = array();

function nfw_malware_start() {

	$nfw_options = nfw_get_option('nfw_options');

	if (! empty( $nfw_options['malware_dir'] ) ) {
		$malware_dir = $nfw_options['malware_dir'];
	} else {
		$malware_dir = ABSPATH;
	}

	if ( empty( $nfw_options['malware_symlink'] ) ) {
		$malware_symlink = 0;
	} else {
		$malware_symlink = 1;
	}

	if (! empty( $nfw_options['malware_timestamp'] ) ) {
		$malware_timestamp = $nfw_options['malware_timestamp'] * 60 * 60 * 24;
	} else {
		$malware_timestamp = 0;
	}

	if (! empty( $nfw_options['malware_size'] ) ) {
		$malware_size = $nfw_options['malware_size'] * 1024;
	} else {
		$malware_size = 0;
	}

	$malware_extensions = '';
	if (! empty( $nfw_options['malware_extensions'] ) ) {
		$exclude_array = unserialize( $nfw_options['malware_extensions'] );
		if ( $exclude_array ) {
			foreach ( $exclude_array as $exclude ) {
				$malware_extensions .= "$exclude|";
			}
			$malware_extensions = '\.(?i:'. rtrim( $malware_extensions, '|' ) .')$';
		}
	}

	$malware_folders = '';
	if (! empty( $nfw_options['malware_folders'] ) ) {
		$exclude_array = unserialize( $nfw_options['malware_folders'] );
		if ( $exclude_array ) {
			foreach ( $exclude_array as $exclude ) {
				$malware_folders .= "$exclude|";
			}
			$malware_folders = '(?:'. rtrim( $malware_folders, '|' ) .')';
		}
	}

	$exclude = '';
	if ( $malware_extensions && $malware_folders ) {
		$exclude = $malware_extensions .'|'. $malware_folders;
	} elseif (! $malware_extensions && $malware_folders ) {
		$exclude = $malware_folders;
	} elseif ( $malware_extensions && ! $malware_folders ) {
		$exclude = $malware_extensions;
	}

	nfw_clean_cache();

	global $scan_res;
	@ini_set('max_execution_time', 0);
	$signatures = $tmp_signatures = array();

	$mysigs = explode(':', NFW_SCAN_SIGS);

	if ( in_array('lmd', $mysigs) ) {
		$tmp_files = array( 0 =>  __DIR__ . '/share/sigs.php' );
		$tmp_signatures = nfw_load_signatures( $tmp_files );
		$signatures = $tmp_signatures;
	}

	$tmp_files = nfw_fetch_user_sigs( NFW_SIG_DIR );
	$tmp_signatures = nfw_load_signatures( $tmp_files, $mysigs );
	$signatures += $tmp_signatures;

	$tmp = count($signatures);
	if ( file_exists( NFW_SIG_DIR . '/sigs-error.txt') ) {
		$tmp .= ':1';
	}
	file_put_contents( MSC_TOT_SIGS, 'sigs:' . $tmp );

	if ( count($signatures) < 1 ) {
		touch( MSC_END );
		@unlink( MSC_LOCK );
		return;
	}

	touch( MSC_LOCK );
	file_put_contents( MSC_COUNT , '');

	scd( $malware_dir, $exclude, $signatures, $malware_symlink, $malware_size, $malware_timestamp, time() );

	if ( count( $scan_res ) > 0 ) {
		file_put_contents( MSC_RES, serialize( $scan_res ) );
	} else {
		if ( file_exists( MSC_RES ) ) {
			unlink( MSC_RES );
		}
	}

	touch( MSC_END );
	@unlink( MSC_LOCK );

}

/* ------------------------------------------------------------------ */ // i18n+

function nfw_load_signatures( $tmp_files, $mysigs = null ) {

	$signatures = $tmp_signatures = array();
	foreach ( $tmp_files as $file ) {

		if (! empty( $mysigs ) && ! in_array( md5( $file ), $mysigs) ) { continue; }

		if ( file_exists( $file ) ) {
			if ( $fh = fopen( $file, 'r' ) ) {
				while (! feof($fh) ) {
					if ( $line = fgets($fh) ) {
						$tmp_signatures = explode (':', rtrim( $line ) );
						if ( preg_match( '/^{[HR]EX}/', $tmp_signatures[0] ) && ! empty( $tmp_signatures[3] )  ) {
							if ( $res = hex2str($tmp_signatures[3], $tmp_signatures[0]) ) {
								$signatures[$tmp_signatures[0]] = $res;
							}
						}
					}
				}
				fclose($fh);
			}
		}
	}
	return $signatures;
}

/* ------------------------------------------------------------------ */ // i18n+

function hex2str( $hex, $type ) {
    $str = '';
    for ( $i=0; $i < strlen( $hex ); $i += 2) {
		 $str .= chr( hexdec( substr( $hex, $i, 2 ) ) );
	 }
	 if ( preg_match( '/^{REX/', $type ) ) {
		$str = preg_replace( '/`/', '\x60', $str );
		if ( preg_match("`$str`", 'foobar') === FALSE ) {
			file_put_contents( NFW_SIG_DIR . '/sigs-error.txt', "REX signature error: $type: $hex\n", FILE_APPEND);
			return false;
		}
	 } elseif ( preg_match( '/^{HEX/', $type ) ) {
		if ( preg_match( '`[^a-f0-9]`i', $hex ) ) {
			file_put_contents( NFW_SIG_DIR . '/sigs-error.txt', "HEX signature error: $type: $hex\n", FILE_APPEND);
			return false;
		}
	}
    return $str;
}

/* ------------------------------------------------------------------ */ // i18n+

function scd( $malware_dir, $exclude, $signatures, $malware_symlink, $malware_size, $malware_timestamp, $now ) {

   global $scan_res;

   if ( is_readable( $malware_dir ) && is_dir( $malware_dir ) ) {

		if ($dh = opendir($malware_dir) ) {
			while ( FALSE !== ( $file = readdir($dh) ) ) {
				if ( $file == '.' || $file == '..') { continue; }

				if (! file_exists( MSC_LOCK ) ) {
					closedir($dh);
					exit;
				}

				$full_path = $malware_dir . '/' . $file;

				if ( is_readable( $full_path ) ) {
					if ( $malware_symlink && is_link( $full_path ) ) { continue; }

					if ( $exclude ) { if ( preg_match("`$exclude`", $full_path) ) { continue; } }

					if ( is_dir( $full_path ) ) {
						scd( $full_path, $exclude, $signatures, $malware_symlink, $malware_size, $malware_timestamp, $now );

					} elseif ( is_file( $full_path ) ) {

						$fstat = stat( $full_path );
						if ( $malware_size ) {
							if ( $fstat['size'] > $malware_size ) { continue;	}
						}
						if ( $malware_timestamp ) {
							if ( $now - $fstat['ctime'] > $malware_timestamp ) { continue; }
						}

						file_put_contents( MSC_COUNT, ' ', FILE_APPEND);

						$content = file_get_contents( $full_path );

						foreach ( $signatures as $key => $value ) {

							if ( preg_match( '/^{REX/', $key ) ) {
								if ( preg_match( "`$value`", $content ) ) {
									$scan_res[base64_encode( $full_path )] = $key ;
									break;
								}
							} else {
								if ( strpos( $content, $value ) !== false ) {
									$scan_res[base64_encode( $full_path )] = $key ;
									break;
								}
							}
						}
					}
				}
			}
			closedir($dh);
		}
   }
}

/* ------------------------------------------------------------------ */ // i18n+

function nfw_msajax_javascript() {

	$ajax_nonce = wp_create_nonce( 'nfw_msajax_javascript' );
?>

<script type="text/javascript" >

var start_time;

jQuery(document).ready(function($) {

	$('#button_start').click(function () {

		var mysigs = '';
		var arr = $('input[name="sigs[]"]').map(function () {
			if ( this.checked ) {
				mysigs+= $(this).val() + ':';
			}
		}).get();

		if ( mysigs.length < 3 ) {
			alert('<?php
				// translators: quotes ('") must be escaped
				_e('You must select at least one signatures file.', 'ninjafirewall');
			?>');
			return;
		}

		$('#loading-sig-gif').show();
		$('#loading-sigs-found').hide();
		$('#total-time').hide();
		$('#malware-hits').hide();
		$('#suspicious').hide();
		$('#scanned').html('<?php
			// translators: quotes ('") must be escaped
			_e('Scanning', 'ninjafirewall');
		?>');
		$("#table_processing").show();
		$('#button_start').prop( "disabled", true );
		$('#button_cancel').prop( "disabled", false );
		$("#scanning").hide();

		var data = { 'action': 'nfw_msajax', 'nfw_sc_nonce': '<?php echo $ajax_nonce; ?>', 'sigs': mysigs };
		jQuery.post(ajaxurl, data, function(response) {

			if ( response == 'OK' ) {
				start_scan();
			} else {
				if ( response == '1' ) {
					alert('<?php
						// translators: quotes ('") must be escaped
						_e('Security nonces do not match. Reload this page and try again.', 'ninjafirewall');
					?>');
				} else{

					alert('<?php
						// translators: quotes ('") must be escaped
						_e('An unknown error occurred', 'ninjafirewall');
						echo ' (#1).'
					?>');
				}

				$('#loading-sigs-found').html(  '<font color="red"><?php
					// translators: quotes ('") must be escaped
					_e('Error', 'ninjafirewall');
				?></font>' );
				$('#loading-sig-gif').hide();
				$('#loading-sigs-found').show();
				$('#button_start').prop( "disabled", false);
				$('#button_cancel').prop( "disabled", true );
			}
		});
	});


	$('#button_cancel').click(function () {

		cancel_scan();

		alert('<?php
			// translators: quotes ('") must be escaped
			_e('The scanning process was cancelled.', 'ninjafirewall')
		?>');
		$("#table_processing").hide();
		$('#button_cancel').prop( "disabled", true );
		$('#button_start').prop( "disabled", false );

	});


	function start_scan() {
		get_loaded_signatures();
		start_time = Math.round(new Date().valueOf()/1000);
	}


	var loop = 0;
	var thdl;
	var get_loaded_signatures = function () {8
		var data = { 'malscan': '1' };
		jQuery.post(ajaxurl, data, function(response) {

			clearTimeout(thdl);
			thdl = 0;
			loop = 5;

			$('#loading-sig-gif').hide();
			var arr = response.split(':');

			if ( arr[1] == '0' ) {
				$('#loading-sigs-found').html(  '<font color="red"><?php
					// translators: quotes ('") must be escaped
					_e('Error: no signatures found', 'ninjafirewall');
				?></font>' );
				$('#loading-sigs-found').show();

			} else if ( arr[0] == 'sigs' && /^\d+$/.test(arr[1]) ) {
					var sigs_err = '';
				if ( arr[2] !== undefined ) {
					sigs_err = ' <?php
					// translators: quotes ('") must be escaped
					printf( __('(some errors were detected in your signatures. See the %s file for more info).', 'ninjafirewall'), '<i>'. NFW_SIG_DIR . '/sigs-error.txt</i>');
				?>';
				}
				$('#loading-sigs-found').html(  arr[1] + ' <?php
					// translators: quotes ('") must be escaped
					_e('signatures found', 'ninjafirewall');
				?>' + sigs_err );
				$('#loading-sigs-found').show();
				$("#scanning").show();
				$('#scanning-gif').show();

				loop = 0;
				get_num_scanned_files();

			} else {
				$('#loading-sigs-found').html(  '<font color="red"><?php
					// translators: quotes ('") must be escaped
					_e('Error: unable to load signatures', 'ninjafirewall');
				?> (#1)</font>' );
				$('#loading-sigs-found').show();
				$('#button_start').prop( "disabled", false );
				$('#button_cancel').prop( "disabled", true );
			}
		}, 'text');

		if ( ++loop < 5 ) {
			thdl = setTimeout(get_loaded_signatures, 2000);
		} else {

			loop = 0;
			clearTimeout(thdl);
			thdl = 0;

			$('#loading-sig-gif').hide();
			$('#loading-sigs-found').html(  '<font color="red"><?php
				// translators: quotes ('") must be escaped
				_e('Error: unable to load signatures', 'ninjafirewall');
				?> (#2)</font>' );
			$('#loading-sigs-found').show();
			$('#button_start').prop( "disabled", false );
			$('#button_cancel').prop( "disabled", true );
		}
	};

	var loop2 = 0;
	var get_num_scanned_files = function () {
		var data = { 'malscan': '2' };
		jQuery.post(ajaxurl, data, function(response) {
			var arr = response.split(':');
			if ( arr[0] == 'err' ) {
				if ( arr[1] == '21' ) {
					alert('<?php
						// translators: quotes ('") must be escaped
						_e('An unknown error occurred', 'ninjafirewall');
						echo ' (#21).';
					 ?>');
				}
				if ( thdl > 0 ) {
					clearTimeout(thdl);
					thdl = 0;
				}

				$('#loading-sig-gif').hide();
				$('#loading-sigs-found').html(  '<font color="red"><?php
					// translators: quotes ('") must be escaped
					_e('Error', 'ninjafirewall');
				 ?></font>' );
				$('#loading-sigs-found').show();
				$('#scanning').hide();
				$('#button_start').prop( "disabled", false );
				$('#button_cancel').prop( "disabled", true );

			} else if ( arr[0] == 'ok' && /^\d+$/.test(arr[1]) ) {
				$('#scanning-num-files').html(arr[1]);
				thdl = setTimeout(get_num_scanned_files, 2000);

			} else if (arr[0] == 'end' && /^\d+$/.test(arr[1]) ) {
				scan_tot = Math.round(new Date().valueOf()/1000) - window.start_time;
				if ( thdl > 0 ) {
					clearTimeout(thdl);
					thdl = 0;
				}
				$('#scanning-num-files').html(arr[1]);
				$('#scanning-gif').hide();
				$('#button_start').prop( "disabled", false );
				$('#button_cancel').prop( "disabled", true );
				$('#scanned').html('<?php
					// translators: quotes ('") must be escaped
					_e('Scan completed:', 'ninjafirewall');
				?>');
				$('#total-time').html('<?php
					printf(
						// translators: quotes ('") must be escaped
						__('Processing time: %s second(s)', 'ninjafirewall'), "'+ scan_tot +'") ?>');
				$('#total-time').show();

				get_scan_results();
			}
		}, 'text')
	};

	var get_scan_results = function () {
		var data = { 'malscan': '4' };
		jQuery.post(ajaxurl, data, function(response) {

			var arr = response.split('~~', 3);

			if ( arr[0] == 'ok' && /^\d+$/.test(arr[1]) ) {
				if ( arr[1] < 1 ) {
					$('#malware_hits_count').html('0');
				} else {
					$('#malware_hits_count').html('<font style="color:red">'+ arr[1] +'</font>');
					$('#suspicious_list').html( arr[2] );
					var rows = 10;
					if ( arr[1] < 11 ) {
						rows = ++arr[1];
					} else if ( arr[1] > 10 && arr[1] < 21 ) {
						rows = 20;
					}
					$('#suspicious_list').attr('rows', rows );
					$('#suspicious').show();
				}
				$('#malware-hits').show();

			} else if ( arr[0] == 'err' ) {
				alert('<?php
					// translators: quotes ('") must be escaped
					_e('An unknown error occurred', 'ninjafirewall');
					echo " (#'+ arr[1] +')."
				?>');
			}
		}, 'text')
	};


	function cancel_scan() {
		loop = 0; loop2 = 0;
		if ( thdl > 0 ) {
			clearTimeout(thdl);
		}
		var data = { 'malscan': '3' };
		jQuery.post( ajaxurl, data, { /* nothing to do! */ } );
	}


	$('#button_previous').click(function () {
		if ( $("#previous_list").is(":visible") ) {
			$('#previous_list').hide();
			$(this).val('<?php
				// translators: quotes ('") must be escaped
				_e('Show previous scan results', 'ninjafirewall')
			?>');
		} else {
			$('#previous_list').show();
			$(this).val('<?php
				// translators: quotes ('") must be escaped
				_e('Hide previous scan results', 'ninjafirewall')
			?>');
		}
	});

});

</script>
<?php
}

/* ------------------------------------------------------------------ */ // i18n+
// EOF
